

44) the corrupted_data function needs to also produce a list as a result. Use a while loop that states as long as the length of the results > 0
keep trying to get a good file. If it produces the same list X time, print something to the logger and continue
50) ***The BrokenConnection needs to be a class and inhereit one of the built-in Python classes
    Will be raised if too many consecutive corrupted files are created

    class BrokenConnection(Exception)

        def __init__(self, file_name):
            super().__init__()
            self.file_name = file_name

        def __str__(self):
            print(f'{self.file_name} is possibly corrupted')

        def __repr__(self):
            return repr(...)


52) May need to use regex to read logger files to input what may be
corrupted files if the program fails and I need to restart it (until I use the shelf function)
***Put a Regex to read the event logger from the log file to put back into obj
53) Properly create logger for CreateZip function
55) Function that sends the data to an SQL Database
56) Format the runtime timedelta datetime.timedelta(seconds=4125, microseconds=179383) to show the hours as well for all functions
57) Put a logger in the extract_re_data that lets you know what city is being run (Each run produces the  same logger multiple times. Figure out why)
    Look into logger.propagate = False
59) Look into multi-threading for the CreateZip() and check_results() functions
60) Truncate the (YoY) numbers
61) Something is wrong with the 2018-19 data
62) I forgot this is file streaming for extracting the files. I need to do this:
    with open ("sample.pdf", "rb") as f:
   pdf = pdf2.PdfFileReader(f)
45) If the program is killed due to an exception, I want to be be able to rerun the program X number of times
47) Create a function that states "if too many consecutive corrupt files are created, kill program"
14) Create variables for the December data scrape?
    I actually need to create a whole new function just for this?
19) Change the NJR10k logger directory to my Python Folder
25) Save the different Pandas df into seperate sheets of the same Excel workbook (send yourself the StackOverflow link to get an example)
26) Create a function that append the appropiate sheet in the target Excel workbook
27) See where list comprehension or generators can be used in the program
28) Create a list for possibly corrupted files and an enlighten progress bar for them
32) Add enlighten progress bars to pdf downloads and pdf processors
    Figure out how to track multiple progress bars with the manager
33) Save Python files to the shelf to save previous  values and results

	    Look into book on page 184 and 185 to write the code

34) Send text message to phone once the program completes with a summary of what occurred



Test String:
Key Metrics 2022 2023 Percent Change Thru 4-2022 Thru 4-2023 Percent Change
New Listings 25 13 - 48.0% 85 64 - 24.7%
Closed Sales 11 9 - 18.2% 46 37 - 19.6%
Days on Market Until Sale 36 42 + 16.7% 32 37 + 15.6%
Median Sales Price* $90,000 $101,000 + 12.2% $116,250 $95,000 - 18.3%
Percent of List Price Received* 107.8% 94.6% - 12.2% 99.7% 93.6% - 6.1%
Inventory of Homes for Sale 59 25 - 57.6% -- -- --
Months Supply of Inventory 4.8 2.0 - 58.3% -- -- --
Key Metrics 2022 2023 Percent Change Thru 4-2022 Thru 4-2023 Percent Change
New Listings 39 32 - 17.9% 134 131 - 2.2%
Closed Sales 19 34 + 78.9% 75 100 + 33.3%
Days on Market Until Sale 26 30 + 15.4% 39 46 + 17.9%
Median Sales Price* $70,000 $92,000 + 31.4% $72,334 $95,000 + 31.3%
Percent of List Price Received* 102.3% 99.8% - 2.4% 98.5% 97.6% - 0.9%
Inventory of Homes for Sale 86 61 - 29.1% -- -- --
Months Supply of Inventory 3.7 2.2 - 40.5% -- -- --
Key Metrics 2022 2023 Percent Change Thru 4-2022 Thru 4-2023 Percent Change
New Listings 0 0 -- 0 0 --
Closed Sales 0 0 -- 0 0 --
Days on Market Until Sale 0 0 -- 0 0 --
Median Sales Price* $0 $0 -- $0 $0 --
Percent of List Price Received* 0.0% 0.0% -- 0.0% 0.0% --
Inventory of Homes for Sale 0 0 -- -- -- --
Months Supply of Inventory 0.0 0.0 -- -- -- --
* Does not account for sale concessions and/or downpayment assistance.  |  Percent changes are calculated using rounded figures and can sometimes look extreme due to small sample size.Year to DateTownhouse-Condo April
Adult Community AprilYear to Date
Current as of May 20, 2023. All data from the multiple listing services in the state of New Jersey. Margin of error for reported statewide numbers is +/– 4% at a 95% confidence level. Report © 2023 ShowingTime.Local Market Update for April 2023
Provided by New Jersey REALTORS®
Camden City
Camden County
April Year to Date Single Family
$0$25,000$50,000$75,000$100,000$125,000$150,000$175,000
1-2010 1-2011 1-2012 1-2013 1-2014 1-2015 1-2016 1-2017 1-2018 1-2019 1-2020 1-2021 1-2022 1-2023Historical Median Sales Price by Property Type By Month
Single Family Townhouse-Condo Adult Community

Old Request Code:
try:
    new_filename = " ".join(['Camden', 'April', '2023']) + ".pdf"
    url_parse = urlparse('https://www.njrealtor.com/login/?rd=10&passedURL=/goto/10k/')
    with req.urlopen('https://www.njrealtor.com/login/?rd=10&passedURL=/goto/10k/') as response:
        print(response.headers)
        print(response.info())
    #local_filename, headers = req.urlretrieve('http://njar.stats.10kresearch.com/docs/lmu/x/CamdenCity?src=page', 'C:\\Users\\Omar\\AppData\\Local\\Temp\\temp.html')
    #starter = req.Request('https://fred.stlouisfed.org/graph/fredgraph.pdf?hires=1&type=application/pdf&bgcolor=%23e1e9f0&chart_type=line&drp=0&fo=open%20sans&graph_bgcolor=%23ffffff&height=450&mode=fred&recession_bars=on&txtcolor=%23444444&ts=12&tts=12&width=1168&nt=0&thu=0&trc=0&show_legend=yes&show_axis_titles=yes&show_tooltip=yes&id=CPIAUCSL,CPILFESL&scale=left,left&cosd=1964-08-01,1964-08-01&coed=2023-04-01,2023-04-01&line_color=%234572a7,%23aa4643&link_values=false,false&line_style=solid,solid&mark_type=none,none&mw=2,2&lw=2,2&ost=-99999,-99999&oet=99999,99999&mma=0,0&fml=a,a&fq=Monthly,Monthly&fam=avg,avg&fgst=lin,lin&fgsnd=2009-06-01,2009-06-01&line_index=1,2&transformation=pc1,pc1&vintage_date=2023-06-12,2023-06-12&revision_date=2023-06-12,2023-06-12&nd=1947-01-01,1957-01-01',headers=headers)
    #with open(local_filename, 'rb') as reader, open(new_filename, 'wb') as writer:
    #with req.urlopen(starter) as reader, open(new_filename, 'wb') as writer:
        #target_html = reader.readlines()
        #for item in target_html:
            #writer.write(item)
            #logger.info(f'The data for {town} {year} Has Been Successfully Downloaded')
except IOError as e:
    print(f'{e}')
    #logger.exception("IOError Occured: ", strerror(e.errno))



'2023': {'City': ['Aberdeen Twp'],
          'Closed Sales % Change Apr (YoY)': [-0.688],
          'Closed Sales % Change Feb (YoY)': [-0.222],
          'Closed Sales % Change Jan (YoY)': [-0.25],
          'Closed Sales % Change May (YoY)': [-0.35, -0.35, -0.35, -0.35],
          'Closed Sales Apr 2022': [16],
          'Closed Sales Apr 2023': [5],
          'Closed Sales Feb 2022': [9],
          'Closed Sales Feb 2023': [7],
          'Closed Sales Jan 2022': [12],
          'Closed Sales Jan 2023': [9],
          'Closed Sales May 2022': [20, 20, 20, 20],
          'Closed Sales May 2023': [13, 13, 13, 13],
          'County': ['Monmouth County'],
          'Days on Market % Change Apr (YoY)': [0.043],
          'Days on Market % Change Feb (YoY)': [0.087],
          'Days on Market % Change Jan (YoY)': [0.414],
          'Days on Market % Change May (YoY)': [1.889, 1.889, 1.889, 1.889],
          'Days on Market Apr 2022': [23],
          'Days on Market Apr 2023': [24],
          'Days on Market Feb 2022': [46],
          'Days on Market Feb 2023': [50],
          'Days on Market Jan 2022': [70],
          'Days on Market Jan 2023': [99],
          'Days on Market May 2022': [18, 18, 18, 18],
          'Days on Market May 2023': [52, 52, 52, 52],
          'Inventory of Homes for Sale % Change Apr (YoY)': [-0.028999999999999998],
          'Inventory of Homes for Sale % Change Feb (YoY)': [0.391],
          'Inventory of Homes for Sale % Change Jan (YoY)': [0.14300000000000002],
          'Inventory of Homes for Sale % Change May (YoY)': [-0.33299999999999996,
                                                             -0.33299999999999996,
                                                             -0.33299999999999996,
                                                             -0.33299999999999996],
          'Inventory of Homes for Sale Apr 2022': [35],
          'Inventory of Homes for Sale Apr 2023': [34],
          'Inventory of Homes for Sale Feb 2022': [23],
          'Inventory of Homes for Sale Feb 2023': [32],
          'Inventory of Homes for Sale Jan 2022': [28],
          'Inventory of Homes for Sale Jan 2023': [32],
          'Inventory of Homes for Sale May 2022': [36, 36, 36, 36],
          'Inventory of Homes for Sale May 2023': [24, 24, 24, 24],
          'Median Sales Price % Change Apr (YoY)': [0.975],
          'Median Sales Price % Change Feb (YoY)': [0.5579999999999999],
          'Median Sales Price % Change Jan (YoY)': [0.364],
          'Median Sales Price % Change May (YoY)': [-0.152,
                                                    -0.152,
                                                    -0.152,
                                                    -0.152],
          'Median Sales Price Apr 2022': [243000],
          'Median Sales Price Apr 2023': [480000],
          'Median Sales Price Feb 2022': [285000],
          'Median Sales Price Feb 2023': [444000],
          'Median Sales Price Jan 2022': [399500],
          'Median Sales Price Jan 2023': [545000],
          'Median Sales Price May 2022': [525000, 525000, 525000, 525000],
          'Median Sales Price May 2023': [445000, 445000, 445000, 445000],
          'Months of Supply % Change Apr (YoY)': [0.043],
          'Months of Supply % Change Feb (YoY)': [0.087],
          'Months of Supply % Change Jan (YoY)': [0.414],
          'Months of Supply % Change May (YoY)': [1.889, 1.889, 1.889, 1.889],
          'Months of Supply Apr 2022': [23],
          'Months of Supply Apr 2023': [24],
          'Months of Supply Feb 2022': [46],
          'Months of Supply Feb 2023': [50],
          'Months of Supply Jan 2022': [70],
          'Months of Supply Jan 2023': [99],
          'Months of Supply May 2022': [18, 18, 18, 18],
          'Months of Supply May 2023': [52, 52, 52, 52],
          'New Listings % Change Apr (YoY)': [-0.318],
          'New Listings % Change Feb (YoY)': [-0.278],
          'New Listings % Change Jan (YoY)': [-0.077],
          'New Listings % Change May (YoY)': [-0.594, -0.594, -0.594, -0.594],
          'New Listings Apr 2022': [22],
          'New Listings Apr 2023': [15],
          'New Listings Feb 2022': [18],
          'New Listings Feb 2023': [13],
          'New Listings Jan 2022': [13],
          'New Listings Jan 2023': [12],
          'New Listings May 2022': [32, 32, 32, 32],
          'New Listings May 2023': [13, 13, 13, 13],
          'Percent of Listing Price Received % Change Apr (YoY)': [0.009000000000000001],
          'Percent of Listing Price Received % Change Feb (YoY)': [0.006999999999999999],
          'Percent of Listing Price Received % Change Jan (YoY)': [-0.044000000000000004],
          'Percent of Listing Price Received % Change May (YoY)': [-0.024,
                                                                   -0.024,
                                                                   -0.024,
                                                                   -0.024],
          'Percent of Listing Price Received Apr 2022': [105.4],
          'Percent of Listing Price Received Apr 2023': [106.4],
          'Percent of Listing Price Received Feb 2022': [100.3],
          'Percent of Listing Price Received Feb 2023': [101.0],
          'Percent of Listing Price Received Jan 2022': [102.2],
          'Percent of Listing Price Received Jan 2023': [97.7],
          'Percent of Listing Price Received May 2022': [105.8,
                                                         105.8,
                                                         105.8,
                                                         105.8],
          'Percent of Listing Price Received May 2023': [103.3,
                                                         103.3,
                                                         103.3,
                                                         103.3]}}

['Aberdeen Twp', 'Absecon City', 'Alexandria Twp', 'Allamuchy Twp', 'Allendale Boro', 'Allenhurst Boro', 'Allentown Boro', 'Alloway Twp',
'Alpha Boro', 'Alpine Boro', 'Andover Boro', 'Andover Twp', 'Asbury Park City', 'Atlantic City', 'Atlantic Highlands Boro', 'Audubon Boro',
'Audubon Park Boro', 'Avalon Boro', 'Avon-By-The-Sea Boro', 'Barnegat Light Boro', 'Barnegat Twp', 'Barrington Boro', 'Bass River Twp', 'Bay Head Boro',
'Bayonne City', 'Beach Haven Boro', 'Beachwood Boro', 'Bedminster Twp', 'Belleville Twp', 'Bellmawr Boro', 'Belmar Boro', 'Belvidere Twp', 'Bergenfield Boro',
'Berkeley Heights Twp', 'Berkeley Twp', 'Berlin Boro', 'Berlin Twp', 'Bernards Twp', 'Bernardsville Boro', 'Bethlehem Twp', 'Beverly City', 'Blairstown Twp', 'Bloomfield Twp',
'Bloomingdale Boro', 'Bloomsbury Boro', 'Bogota Boro', 'Boonton Town', 'Boonton Twp', 'Bordentown City', 'Bordentown Twp', 'Bound Brook Boro',
'Bradley Beach Boro', 'Branchburg Twp', 'Branchville Boro', 'Brick Twp', 'Bridgeton City', 'Bridgewater Twp', 'Brielle Boro', 'Brigantine City',
'Brooklawn Boro', 'Buena Boro', 'Buena Vista Twp', 'Burlington City', 'Burlington Twp', 'Butler Boro', 'Byram Twp', 'Caldwell Boro Twp', 'Califon Boro',
'Camden City', 'Cape May City', 'Cape May Point Boro', 'Carlstadt Boro', 'Carneys Point Twp', 'Carteret Boro', 'Cedar Grove Twp', 'Chatham Boro', 'Chatham Twp',
'Cherry Hill Twp', 'Chesilhurst Boro', 'Chester Boro', 'Chester Twp', 'Chesterfield Twp', 'Cinnaminson Twp', 'City Of Orange Twp', 'Clark Twp', 'Clayton Boro',
'Clementon Boro', 'Cliffside Park Boro', 'Clifton City', 'Clinton Town', 'Clinton Twp', 'Closter Boro', 'Collingswood Boro', 'Colts Neck Twp', 'Commercial Twp',
'Corbin City', 'Cranbury Twp', 'Cranford Twp', 'Cresskill Boro', 'Deal Boro', 'Deerfield Twp', 'Delanco Twp', 'Delaware Twp', 'Delran Twp', 'Demarest Boro', 'Dennis Twp',
'Denville Twp', 'Deptford Twp', 'Dover Town', 'Downe Twp', 'Dumont Boro', 'Dunellen Boro', 'Eagleswood Twp', 'East Amwell Twp', 'East Brunswick Twp', 'East Greenwich Twp',
'East Hanover Twp', 'East Newark Boro', 'East Orange City', 'East Rutherford Boro', 'East Windsor Twp', 'Eastampton Twp', 'Eatontown Boro', 'Edgewater Boro', 'Edgewater Park Twp',
'Edison Twp', 'Egg Harbor City', 'Egg Harbor Twp', 'Elizabeth City', 'Elk Twp', 'Elmer Boro', 'Elmwood Park Boro', 'Elsinboro Twp', 'Emerson Boro', 'Englewood City', 'Englewood Cliffs Boro',
'Englishtown Boro', 'Essex Fells Twp', 'Estell Manor City', 'Evesham Twp', 'Ewing Twp', 'Fair Haven Boro', 'Fair Lawn Boro', 'Fairfield Twp ', 'Fairfield Twp ', 'Fairview Boro', 'Fanwood Boro',
'Far Hills Boro', 'Farmingdale Boro', 'Fieldsboro Boro', 'Flemington Boro', 'Florence Twp', 'Florham Park Boro', 'Folsom Boro', 'Fort Lee Boro', 'Frankford Twp', 'Franklin Boro', 'Franklin Lakes Boro', 'Franklin Twp ',
'Franklin Twp ', 'Franklin Twp ', 'Franklin Twp ', 'Fredon Twp', 'Freehold Boro', 'Freehold Twp', 'Frelinghuysen Twp', 'Frenchtown Boro', 'Galloway Twp', 'Garfield City', 'Garwood Boro', 'Gibbsboro Boro', 'Glassboro Boro',
'Glen Gardner Boro', 'Glen Ridge Boro Twp', 'Glen Rock Boro', 'Gloucester City', 'Gloucester Twp', 'Green Brook Twp', 'Green Twp', 'Greenwich Twp ', 'Greenwich Twp ', 'Greenwich Twp ', 'Guttenberg Town', 'Hackensack City', 'Hackettstown Town', 'Haddon Heights Boro', 'Haddon Twp', 'Haddonfield Boro', 'Hainesport Twp', 'Haledon Boro', 'Hamburg Boro', 'Hamilton Twp ', 'Hamilton Twp ', 'Hammonton Town', 'Hampton Boro', 'Hampton Twp', 'Hanover Twp', 'Harding Twp', 'Hardwick Twp', 'Hardyston Twp', 'Harmony Twp', 'Harrington Park Boro', 'Harrison Town', 'Harrison Twp', 'Harvey Cedars Boro', 'Hasbrouck Heights Boro', 'Haworth Boro', 'Hawthorne Boro', 'Hazlet Twp', 'Helmetta Boro', 'High Bridge Boro', 'Highland Park Boro', 'Highlands Boro', 'Hightstown Boro', 'Hillsborough Twp', 'Hillsdale Boro', 'Hillside Twp', 'Hi-Nella Boro', 'Hoboken City', 'Hohokus Boro', 'Holland Twp', 'Holmdel Twp', 'Hopatcong Boro', 'Hope Twp', 'Hopewell Boro', 'Hopewell Twp ', 'Hopewell Twp ', 'Howell Twp', 'Independence Twp', 'Interlaken Boro', 'Irvington Twp', 'Island Heights Boro', 'Jackson Twp', 'Jamesburg Boro', 'Jefferson Twp', 'Jersey City', 'Keansburg Boro', 'Kearny Town', 'Kenilworth Boro', 'Keyport Boro', 'Kingwood Twp', 'Kinnelon Boro', 'Knowlton Twp', 'Lacey Twp', 'Lafayette Twp', 'Lake Como', 'Lakehurst Boro', 'Lakewood Twp', 'Lambertville City', 'Laurel Springs Boro', 'Lavallette Boro', 'Lawnside Boro', 'Lawrence Twp ', 'Lawrence Twp ', 'Lebanon Boro', 'Lebanon Twp', 'Leonia Boro', 'Liberty Twp', 'Lincoln Park Boro', 'Linden City', 'Lindenwold Boro', 'Linwood City', 'Little Egg Harbor Twp', 'Little Falls Twp', 'Little Ferry Boro', 'Little Silver Boro', 'Livingston Twp', 'Loch Arbour Village', 'Lodi Boro', 'Logan Twp', 'Long Beach Twp', 'Long Branch City', 'Long Hill Twp', 'Longport Boro', 'Lopatcong Twp', 'Lower Alloways Creek Twp', 'Lower Twp', 'Lumberton Twp', 'Lyndhurst Twp', 'Madison Boro', 'Magnolia Boro', 'Mahwah Twp', 'Manalapan Twp', 'Manasquan Boro', 'Manchester Twp', 'Mannington Twp', 'Mansfield Twp ', 'Mansfield Twp ', 'Mantaloking Boro', 'Mantua Twp', 'Manville Boro', 'Maple Shade Twp', 'Maplewood Twp', 'Margate City', 'Marlboro Twp', 'Matawan Boro', 'Maurice River Twp', 'Maywood Boro', 'Medford Lakes Boro', 'Medford Twp', 'Mendham Boro', 'Mendham Twp', 'Merchantville Boro', 'Metuchen Boro', 'Middle Twp', 'Middlesex Boro', 'Middletown Twp', 'Midland Park Boro', 'Milford Boro', 'Millburn Twp', 'Millstone Boro', 'Millstone Twp', 'Milltown Boro', 'Millville City', 'Mine Hill Twp', 'Monmouth Beach Boro', 'Monroe Twp ', 'Monroe Twp ', 'Montague Twp', 'Montclair Twp', 'Montgomery Twp', 'Montvale Boro', 'Montville Twp', 'Moonachie Boro', 'Moorestown Twp', 'Morris Plains Boro', 'Morris Twp', 'Morristown Town', 'Mount Arlington Boro', 'Mount Ephraim Boro', 'Mount Holly Twp', 'Mount Laurel Twp', 'Mount Olive Twp', 'Mountain Lakes Boro', 'Mountainside Boro', 'Mullica Twp', 'National Park Boro', 'Neptune City Boro', 'Neptune Twp', 'Netcong Boro', 'New Brunswick City', 'New Hanover Twp', 'New Milford Boro', 'New Providence Boro', 'Newark City', 'Newfield Boro', 'Newton Town', 'North Arlington Boro', 'North Bergen Twp', 'North Brunswick Twp', 'North Caldwell Boro', 'North Haledon Boro', 'North Hanover Twp', 'North Plainfield Boro', 'North Wildwood City', 'Northfield City', 'Northvale Boro', 'Norwood Boro', 'Nutley Twp', 'Oakland Boro', 'Oaklyn Boro', 'Ocean City', 'Ocean Gate Boro', 'Ocean Twp ', 'Ocean Twp ', 'Oceanport Boro', 'Ogdensburg Boro', 'Old Bridge Twp', 'Old Tappan Boro', 'Oldmans Twp', 'Oradell Boro', 'Oxford Twp', 'Palisades Park Boro', 'Palmyra Boro', 'Paramus Boro', 'Park Ridge Boro', 'Parsippany-Troy Hills Twp', 'Passaic City', 'Paterson City', 'Paulsboro Boro', 'Peapack Gladstone Boro', 'Pemberton Boro', 'Pemberton Twp', 'Pennington Boro', 'Penns Grove Boro', 'Pennsauken Twp', 'Pennsville Twp', 'Pequannock Twp', 'Perth Amboy City', 'Phillipsburg Town', 'Pilesgrove Twp', 'Pine Beach Boro', 'Pine Hill Boro', 'Pine Valley Boro', 'Piscataway Twp', 'Pitman Boro', 'Pittsgrove Twp', 'Plainfield City', 'Plainsboro Twp', 'Pleasantville City', 'Plumsted Twp', 'Pohatcong Twp', 'Point Pleasant Beach Boro', 'Point Pleasant Boro', 'Pompton Lakes Boro', 'Port Republic City', 'Princeton', 'Prospect Park Boro', 'Quinton Twp', 'Rahway City', 'Ramsey Boro', 'Randolph Twp', 'Raritan Boro', 'Raritan Twp', 'Readington Twp', 'Red Bank Boro', 'Ridgefield Boro', 'Ridgefield Park Village', 'Ridgewood Village', 'Ringwood Boro', 'River Edge Boro', 'River Vale Twp', 'Riverdale Boro', 'Riverside Twp', 'Riverton Boro', 'Robbinsville Twp', 'Rochelle Park Twp', 'Rockaway Boro', 'Rockaway Twp', 'Rockleigh Boro', 'Rocky Hill Boro', 'Roosevelt Boro', 'Roseland Boro', 'Roselle Boro', 'Roselle Park Boro', 'Roxbury Twp', 'Rumson Boro', 'Runnemede Boro', 'Rutherford Boro', 'Saddle Brook Twp', 'Saddle River Boro', 'Salem City', 'Sandyston Twp', 'Sayreville Boro', 'Scotch Plains Twp', 'Sea Bright Boro', 'Sea Girt Boro', 'Sea Isle City', 'Seaside Heights Boro', 'Seaside Park Boro', 'Secaucus Town', 'Shamong Twp', 'Shiloh Boro', 'Ship Bottom Boro', 'Shrewsbury Boro', 'Shrewsbury Twp', 'Somerdale Boro', 'Somers Point City', 'Somerville Boro', 'South Amboy City', 'South Bound Brook Boro', 'South Brunswick Twp', 'South Hackensack Twp', 'South Harrison Twp', 'South Orange Village Twp', 'South Plainfield Boro', 'South River Boro', 'South Toms River Boro', 'Southampton Twp', 'Sparta Twp', 'Spotswood Boro', 'Spring Lake Boro', 'Spring Lake Heights Boro', 'Springfield Twp ', 'Springfield Twp ', 'Stafford Twp', 'Stanhope Boro', 'Stillwater Twp', 'Stockton Boro', 'Stone Harbor Boro', 'Stow Creek Twp', 'Stratford Boro', 'Summit City', 'Surf City Boro', 'Sussex Boro', 'Swedesboro Boro', 'Tabernacle Twp', 'Tavistock Boro', 'Teaneck Twp', 'Tenafly Boro', 'Teterboro Boro', 'Tewksbury Twp', 'Tinton Falls Boro', 'Toms River Twp', 'Totowa Boro', 'Trenton City', 'Tuckerton Boro', 'Union Beach Boro', 'Union City', 'Union Twp ', 'Union Twp ', 'Upper Deerfield Twp', 'Upper Freehold Twp', 'Upper Pittsgrove Twp', 'Upper Saddle River Boro', 'Upper Twp', 'Ventnor City', 'Vernon Twp', 'Verona Twp', 'Victory Gardens Boro', 'Vineland City', 'Voorhees Twp', 'Waldwick Boro', 'Wall Twp', 'Wallington Boro', 'Walpack Twp', 'Wanaque Boro', 'Wantage Twp', 'Warren Twp', 'Washington Boro', 'Washington Twp ', 'Washington Twp ', 'Washington Twp ', 'Washington Twp ', 'Washington Twp ', 'Watchung Boro', 'Waterford Twp', 'Wayne Twp', 'Weehawken Twp', 'Wenonah Boro', 'West Amwell Twp', 'West Caldwell Twp', 'West Cape May Boro', 'West Deptford Twp', 'West Long Branch Boro', 'West Milford Twp', 'West New York Town', 'West Orange Twp', 'West Wildwood Boro', 'West Windsor Twp', 'Westampton Twp', 'Westfield Twp', 'Westville Boro', 'Westwood Boro', 'Weymouth Twp', 'Wharton Boro', 'White Twp', 'Wildwood City', 'Wildwood Crest Boro', 'Willingboro Twp', 'Winfield Twp', 'Winslow Twp', 'Woodbine Boro', 'Woodbridge Twp', 'Woodbury City', 'Woodbury Heights Boro', 'Woodcliff Lake Boro', 'Woodland Park Boro', 'Woodland Twp', 'Woodlynne Boro', 'Wood-Ridge Boro', 'Woodstown Boro', 'Woolwich Twp', 'Wrightstown Boro', 'Wyckoff Twp']



# def create_categories(dict):
# 	#Seperate each dictionary from the quarterly_yearly function into their tracked categories
#     new_dict = {}
#     for k, v in dict.items():
#         new_dict.setdefault(k, {})
#         new_dict[k].setdefault('Q1', [])
#         new_dict[k].setdefault('Q2', [])
#         new_dict[k].setdefault('Q3', [])
#         new_dict[k].setdefault('Q4', [])
#         for df in v:
#             temp = df.columns.values.tolist()
#             if len(temp) > 3:
#                 fy_new_listings = df[[column for column in df.columns if 'New Listings' in column if k in column]]
#                 fy_new_listings['Mean of FY New Listings'] = fy_new_listings.mean(axis = 1)
#                 fy_new_listings['Median of FY New Listings'] = fy_new_listings.median(axis = 1)
#                 fy_new_listings['Std Dev of FY New Listings'] = fy_new_listings.std(axis = 1)
#                 fy_new_listings['Min of FY New Listings'] = fy_new_listings.min(axis = 1)
#                 fy_new_listings['Max of FY New Listings'] = fy_new_listings.max(axis = 1)
#                 fy_closed_sales = df[[column for column in df.columns if 'Closed Sales' in column if k in column]]
#                 fy_closed_sales['Mean of FY Closed Sales'] = fy_closed_sales.mean(axis = 1)
#                 fy_closed_sales['Median of FY Closed Sales'] = fy_closed_sales.median(axis = 1)
#                 fy_closed_sales['Std Dev of FY Closed Sales'] = fy_closed_sales.std(axis = 1)
#                 fy_closed_sales['Min of FY Closed Sales'] = fy_closed_sales.min(axis = 1)
#                 fy_closed_sales['Max of FY Closed Sales'] = fy_closed_sales.max(axis = 1)
#                 fy_dom = df[[column for column in df.columns if 'Days on Market Until Sale' in column if k in column]]
#                 fy_dom['Mean of FY Days on Market'] = fy_dom.mean(axis = 1)
#                 fy_dom['Median of FY Days on Market'] = fy_dom.median(axis = 1)
#                 fy_dom['Std Dev of FY Days on Market'] = fy_dom.std(axis = 1)
#                 fy_dom['Min of FY Days on Market'] = fy_dom.min(axis = 1)
#                 fy_dom['Max of FY Days on Market'] = fy_dom.max(axis = 1)
#                 fy_median_sales = df[[column for column in df.columns if 'Median Sales Prices' in column if k in column]]
#                 fy_median_sales['Mean of FY Median Sales Price'] = fy_median_sales.mean(axis = 1)
#                 fy_median_sales['Median of FY Median Sales Price'] = fy_median_sales.median(axis = 1)
#                 fy_median_sales['Std Dev of FY Median Sales Price'] = fy_median_sales.std(axis = 1)
#                 fy_median_sales['Min of FY Median Sales Price'] = fy_median_sales.min(axis = 1)
#                 fy_median_sales['Max of FY Median Sales Price'] = fy_median_sales.max(axis = 1)
#                 fy_polpr = df[[column for column in df.columns if 'Percent of List Price Received' in column if k in column]]
#                 fy_polpr['Mean of FY Percent of List Price Received'] = fy_polpr.mean(axis = 1)
#                 fy_polpr['Median of FY Percent of List Price Received'] = fy_polpr.median(axis = 1)
#                 fy_polpr['Std Dev of FY Percent of List Price Received'] = fy_polpr.std(axis = 1)
#                 fy_polpr['Min of FY Percent of List Price Received'] = fy_polpr.min(axis = 1)
#                 fy_polpr['Max of FY Percent of List Price Received'] = fy_polpr.max(axis = 1)
#                 fy_inventory = df[[column for column in df.columns if 'Inventory of Homes for Sale' in column if k in column]]
#                 fy_inventory['Mean of FY Inventory of Homes']= fy_inventory.mean(axis = 1)
#                 fy_inventory['Median of FY Inventory of Homes']= fy_inventory.median(axis = 1)
#                 fy_inventory['Std Dev of FY Inventory of Homes']= fy_inventory.std(axis = 1)
#                 fy_inventory['Min of FY Inventory of Homes']= fy_inventory.min(axis = 1)
#                 fy_inventory['Max of FY Inventory of Homes']= fy_inventory.max(axis = 1)
#                 fy_supply = df[[column for column in df.columns if 'Months Supply of Inventory' in column if k in column]]
#                 fy_supply['Mean of FY Monthly Supply'] = fy_supply.mean(axis = 1)
#                 fy_supply['Median of FY Monthly Supply'] = fy_supply.median(axis = 1)
#                 fy_supply['Std Dev of FY Monthly Supply'] = fy_supply.std(axis = 1)
#                 fy_supply['Min of FY Monthly Supply'] = fy_supply.min(axis = 1)
#                 fy_supply['Max of FY Monthly Supply'] = fy_supply.max(axis = 1)
#                 new_dict[k]['FY'] = [fy_new_listings, fy_closed_sales, fy_dom, fy_median_sales, fy_polpr, fy_inventory, fy_supply]
#             elif 'Jan' in temp[0]:
#                 fyq1_new_listings = df[[column for column in df.columns if 'New Listings' in column if k in column]]
#                 fyq1_new_listings['Mean of Q1 New Listings']= fyq1_new_listings.mean(axis = 1)
#                 fyq1_new_listings['Median of Q1 New Listings']= fyq1_new_listings.median(axis = 1)
#                 fyq1_new_listings['Std Dev of Q1 New Listings']= fyq1_new_listings.std(axis = 1)
#                 fyq1_new_listings['Min of Q1 New Listings']= fyq1_new_listings.min(axis = 1)
#                 fyq1_new_listings['Max of Q1 New Listings']= fyq1_new_listings.max(axis = 1)
#                 fyq1_closed_sales = df[[column for column in df.columns if 'Closed Sales' in column if k in column]]
#                 fyq1_closed_sales['Mean of Q1 Closed Sales']= fyq1_closed_sales.mean(axis = 1)
#                 fyq1_closed_sales['Median of Q1 Closed Sales']= fyq1_closed_sales.median(axis = 1)
#                 fyq1_closed_sales['Std Dev of Q1 Closed Sales']= fyq1_closed_sales.std(axis = 1)
#                 fyq1_closed_sales['Min of Q1 Closed Sales']= fyq1_closed_sales.min(axis = 1)
#                 fyq1_closed_sales['Max of Q1 Closed Sales']= fyq1_closed_sales.max(axis = 1)
#                 fyq1_dom = df[[column for column in df.columns if 'Days on Market Until Sale' in column if k in column]]
#                 fyq1_dom['Mean of Q1 Days on the Market']= fyq1_dom.mean(axis = 1)
#                 fyq1_dom['Median of Q1 Days on the Market']= fyq1_dom.median(axis = 1)
#                 fyq1_dom['Std Dev of Q1 Days on the Market']= fyq1_dom.std(axis = 1)
#                 fyq1_dom['Min of Q1 Days on the Market']= fyq1_dom.min(axis = 1)
#                 fyq1_dom['Max of Q1 Days on the Market']= fyq1_dom.max(axis = 1)
#                 fyq1_median_sales = df[[column for column in df.columns if 'Median Sales Price' in column if k in column]]
#                 fyq1_median_sales['Mean of Q1 Median Sales'] = fyq1_median_sales.mean(axis = 1)
#                 fyq1_median_sales['Median of Q1 Median Sales'] = fyq1_median_sales.median(axis = 1)
#                 fyq1_median_sales['Std Dev of Q1 Median Sales'] = fyq1_median_sales.std(axis = 1)
#                 fyq1_median_sales['Min of Q1 Median Sales'] = fyq1_median_sales.min(axis = 1)
#                 fyq1_median_sales['Max of Q1 Median Sales'] = fyq1_median_sales.max(axis = 1)
#                 fyq1_polpr = df[[column for column in df.columns if 'Percent of List Price Received' in column if k in column]]
#                 fyq1_polpr['Mean of Q1 Percentage of Listing Price Received'] = fyq1_polpr.mean(axis = 1)
#                 fyq1_polpr['Median of Q1 Percentage of Listing Price Received'] = fyq1_polpr.median(axis = 1)
#                 fyq1_polpr['Std Dev of Q1 Percentage of Listing Price Received'] = fyq1_polpr.std(axis = 1)
#                 fyq1_polpr['Min of Q1 Percentage of Listing Price Receive'] = fyq1_polpr.min(axis = 1)
#                 fyq1_polpr['Max of Q1 Percentage of Listing Price Received'] = fyq1_polpr.max(axis = 1)
#                 fyq1_inventory = df[[column for column in df.columns if 'Inventory of Homes for Sale' in column if k in column]]
#                 fyq1_inventory['Mean of Q1 Inventory of Homes'] = fyq1_inventory.mean(axis = 1)
#                 fyq1_inventory['Median of Q1 Inventory of Homes'] = fyq1_inventory.median(axis = 1)
#                 fyq1_inventory['Std Dev of Q1 Inventory of Homes'] = fyq1_inventory.std(axis = 1)
#                 fyq1_inventory['Min of Q1 Inventory of Homes'] = fyq1_inventory.min(axis = 1)
#                 fyq1_inventory['Max of Q1 Inventory of Homes'] = fyq1_inventory.max(axis = 1)
#                 fyq1_supply = df[[column for column in df.columns if 'Months Supply of Inventory' in column if k in column]]
#                 fyq1_supply['Mean of Q1 Monthly Supply'] = fyq1_supply.mean(axis = 1)
#                 fyq1_supply['Median of Q1 Monthly Supply'] = fyq1_supply.median(axis = 1)
#                 fyq1_supply['Std Dev of Q1 Monthly Supply'] = fyq1_supply.std(axis = 1)
#                 fyq1_supply['Min of Q1 Monthly Supply'] = fyq1_supply.min(axis = 1)
#                 fyq1_supply['Max of Q1 Monthly Supply'] = fyq1_supply.max(axis = 1)
#                 new_dict[k]['Q1'] = [fyq1_new_listings, fyq1_closed_sales, fyq1_dom, fyq1_median_sales, fyq1_polpr, fyq1_inventory, fyq1_supply]
#             elif 'Apr' in temp[0]:
#                 fyq2_new_listings = df[[column for column in df.columns if 'New Listings' in column if k in column]]
#                 fyq2_new_listings['Mean of Q2 New Listings']= fyq2_new_listings.mean(axis = 1)
#                 fyq2_new_listings['Median of Q2 New Listings']= fyq2_new_listings.median(axis = 1)
#                 fyq2_new_listings['Std Dev of Q2 New Listings']= fyq2_new_listings.std(axis = 1)
#                 fyq2_new_listings['Min of Q2 New Listings']= fyq2_new_listings.min(axis = 1)
#                 fyq2_new_listings['Max of Q2 New Listings']= fyq2_new_listings.max(axis = 1)
#                 fyq2_closed_sales = df[[column for column in df.columns if 'Closed Sales' in column if k in column]]
#                 fyq2_closed_sales['Mean of Q2 Closed Sales']= fyq2_closed_sales.mean(axis = 1)
#                 fyq2_closed_sales['Median of Q2 Closed Sales']= fyq2_closed_sales.median(axis = 1)
#                 fyq2_closed_sales['Std Dev of Q2 Closed Sales']= fyq2_closed_sales.std(axis = 1)
#                 fyq2_closed_sales['Min of Q2 Closed Sales']= fyq2_closed_sales.min(axis = 1)
#                 fyq2_closed_sales['Max of Q2 Closed Sales']= fyq2_closed_sales.max(axis = 1)
#                 fyq2_dom = df[[column for column in df.columns if 'Days on Market Until Sale' in column if k in column]]
#                 fyq2_dom['Mean of Q2 Days on the Market']= fyq2_dom.mean(axis = 1)
#                 fyq2_dom['Median of Q2 Days on the Market']= fyq2_dom.median(axis = 1)
#                 fyq2_dom['Std Dev of Q2 Days on the Market']= fyq2_dom.std(axis = 1)
#                 fyq2_dom['Min of Q2 Days on the Market']= fyq2_dom.min(axis = 1)
#                 fyq2_dom['Max of Q2 Days on the Market']= fyq2_dom.max(axis = 1)
#                 fyq2_median_sales = df[[column for column in df.columns if 'Median Sales Price' in column if k in column]]
#                 fyq2_median_sales['Mean of Q2 Median Sales'] = fyq2_median_sales.mean(axis = 1)
#                 fyq2_median_sales['Median of Q2 Median Sales'] = fyq2_median_sales.median(axis = 1)
#                 fyq2_median_sales['Std Dev of Q2 Median Sales'] = fyq2_median_sales.std(axis = 1)
#                 fyq2_median_sales['Min of Q2 Median Sales'] = fyq2_median_sales.min(axis = 1)
#                 fyq2_median_sales['Max of Q2 Median Sales'] = fyq2_median_sales.max(axis = 1)
#                 fyq2_polpr = df[[column for column in df.columns if 'Percent of List Price Received' in column if k in column]]
#                 fyq2_polpr['Mean of Q2 Percentage of Listing Price Received'] = fyq2_polpr.mean(axis = 1)
#                 fyq2_polpr['Median of Q2 Percentage of Listing Price Received'] = fyq2_polpr.median(axis = 1)
#                 fyq2_polpr['Std Dev of Q2 Percentage of Listing Price Received'] = fyq2_polpr.std(axis = 1)
#                 fyq2_polpr['Min of Q2 Percentage of Listing Price Received'] = fyq2_polpr.min(axis = 1)
#                 fyq2_polpr['Max of Q2 Percentage of Listing Price Received'] = fyq2_polpr.max(axis = 1)
#                 fyq2_inventory = df[[column for column in df.columns if 'Inventory of Homes for Sale' in column if k in column]]
#                 fyq2_inventory['Mean of Q2 Inventory of Homes'] = fyq2_inventory.mean(axis = 1)
#                 fyq2_inventory['Median of Q2 Inventory of Homes'] = fyq2_inventory.median(axis = 1)
#                 fyq2_inventory['Std Dev of Q2 Inventory of Homes'] = fyq2_inventory.std(axis = 1)
#                 fyq2_inventory['Min of Q2 Inventory of Homes'] = fyq2_inventory.min(axis = 1)
#                 fyq2_inventory['Max of Q2 Inventory of Homes'] = fyq2_inventory.max(axis = 1)
#                 fyq2_supply = df[[column for column in df.columns if 'Months Supply of Inventory' in column if k in column]]
#                 fyq2_supply['Mean of Q2 Monthly Supply'] = fyq2_supply.mean(axis = 1)
#                 fyq2_supply['Median of Q2 Monthly Supply'] = fyq2_supply.median(axis = 1)
#                 fyq2_supply['Std Dev of Q2 Monthly Supply'] = fyq2_supply.std(axis = 1)
#                 fyq2_supply['Min of Q2 Monthly Supply'] = fyq2_supply.min(axis = 1)
#                 fyq2_supply['Max of Q2 Monthly Supply'] = fyq2_supply.max(axis = 1)
#                 new_dict[k]['Q2'] = [fyq2_new_listings, fyq2_closed_sales, fyq2_dom, fyq2_median_sales, fyq2_polpr, fyq2_inventory, fyq2_supply]
#             elif 'Jul' in temp[0]:
#                 fyq3_new_listings = df[[column for column in df.columns if 'New Listings' in column if k in column]]
#                 fyq3_new_listings['Mean of Q3 New Listings']= fyq3_new_listings.mean(axis = 1)
#                 fyq3_new_listings['Median of Q3 New Listings']= fyq3_new_listings.median(axis = 1)
#                 fyq3_new_listings['Std Dev of Q3 New Listings']= fyq3_new_listings.std(axis = 1)
#                 fyq3_new_listings['Min of Q3 New Listings']= fyq3_new_listings.min(axis = 1)
#                 fyq3_new_listings['Max of Q3 New Listings']= fyq3_new_listings.max(axis = 1)
#                 fyq3_closed_sales = df[[column for column in df.columns if 'Closed Sales' in column if k in column]]
#                 fyq3_closed_sales['Mean of Q3 Closed Sales']= fyq3_closed_sales.mean(axis = 1)
#                 fyq3_closed_sales['Median of Q3 Closed Sales']= fyq3_closed_sales.median(axis = 1)
#                 fyq3_closed_sales['Std Dev of Q3 Closed Sales']= fyq3_closed_sales.std(axis = 1)
#                 fyq3_closed_sales['Min of Q3 Closed Sales']= fyq3_closed_sales.min(axis = 1)
#                 fyq3_closed_sales['Max of Q3 Closed Sales']= fyq3_closed_sales.max(axis = 1)
#                 fyq3_dom = df[[column for column in df.columns if 'Days on Market Until Sale' in column if k in column]]
#                 fyq3_dom['Mean of Q3 Days on the Market']= fyq3_dom.mean(axis = 1)
#                 fyq3_dom['Median of Q3 Days on the Market']= fyq3_dom.median(axis = 1)
#                 fyq3_dom['Std Dev of Q3 Days on the Market']= fyq3_dom.std(axis = 1)
#                 fyq3_dom['Min of Q3 Days on the Market']= fyq3_dom.min(axis = 1)
#                 fyq3_dom['Max of Q3 Days on the Market']= fyq3_dom.max(axis = 1)
#                 fyq3_median_sales = df[[column for column in df.columns if 'Median Sales Price' in column if k in column]]
#                 fyq3_median_sales['Mean of Q3 Median Sales'] = fyq3_median_sales.mean(axis = 1)
#                 fyq3_median_sales['Median of Q3 Median Sale'] = fyq3_median_sales.median(axis = 1)
#                 fyq3_median_sales['Std Dev of Q3 Median Sales'] = fyq3_median_sales.std(axis = 1)
#                 fyq3_median_sales['Min of Q3 Median Sales'] = fyq3_median_sales.min(axis = 1)
#                 fyq3_median_sales['Max of Q3 Median Sales'] = fyq3_median_sales.max(axis = 1)
#                 fyq3_polpr = df[[column for column in df.columns if 'Percent of List Price Received' in column if k in column]]
#                 fyq3_polpr['Mean of Q3 Percentage of Listing Price Received'] = fyq3_polpr.mean(axis = 1)
#                 fyq3_polpr['Median of Q3 Percentage of Listing Price Received'] = fyq3_polpr.median(axis = 1)
#                 fyq3_polpr['Std Dev of Q3 Percentage of Listing Price Received'] = fyq3_polpr.std(axis = 1)
#                 fyq3_polpr['Min of Q3 Percentage of Listing Price Received'] = fyq3_polpr.min(axis = 1)
#                 fyq3_polpr['Max of Q3 Percentage of Listing Price Received'] = fyq3_polpr.max(axis = 1)
#                 fyq3_inventory = df[[column for column in df.columns if 'Inventory of Homes for Sale' in column if k in column]]
#                 fyq3_inventory['Mean of Q3 Inventory of Homes'] = fyq3_inventory.mean(axis = 1)
#                 fyq3_inventory['Median of Q3 Inventory of Homes'] = fyq3_inventory.median(axis = 1)
#                 fyq3_inventory['Std Dev of Q3 Inventory of Homes'] = fyq3_inventory.std(axis = 1)
#                 fyq3_inventory['Min of Q3 Inventory of Homes'] = fyq3_inventory.min(axis = 1)
#                 fyq3_inventory['Max of Q3 Inventory of Homes'] = fyq3_inventory.max(axis = 1)
#                 fyq3_supply = df[[column for column in df.columns if 'Months Supply of Inventory' in column if k in column]]
#                 fyq3_supply['Mean of Q3 Monthly Supply'] = fyq3_supply.mean(axis = 1)
#                 fyq3_supply['Median of Q3 Monthly Supply'] = fyq3_supply.median(axis = 1)
#                 fyq3_supply['Std Dev of Q3 Monthly Supply'] = fyq3_supply.std(axis = 1)
#                 fyq3_supply['Min of Q3 Monthly Supply'] = fyq3_supply.min(axis = 1)
#                 fyq3_supply['Max of Q3 Monthly Supply'] = fyq3_supply.max(axis = 1)
#                 new_dict[k]['Q3'] = [fyq3_new_listings, fyq3_closed_sales, fyq3_dom, fyq3_median_sales, fyq3_polpr, fyq3_inventory, fyq3_supply]
#             elif 'Oct' in temp[0]:
#                 fyq4_new_listings = df[[column for column in df.columns if 'New Listings' in column if k in column]]
#                 fyq4_new_listings['Mean of Q4 New Listings']= fyq4_new_listings.mean(axis = 1)
#                 fyq4_new_listings['Median of Q4 New Listings']= fyq4_new_listings.median(axis = 1)
#                 fyq4_new_listings['Std Dev of Q4 New Listings']= fyq4_new_listings.std(axis = 1)
#                 fyq4_new_listings['Min of Q4 New Listings']= fyq4_new_listings.min(axis = 1)
#                 fyq4_new_listings['Max of Q4 New Listings']= fyq4_new_listings.max(axis = 1)
#                 fyq4_closed_sales = df[[column for column in df.columns if 'Closed Sales' in column if k in column]]
#                 fyq4_closed_sales['Mean of Q4 Closed Sales']= fyq4_closed_sales.mean(axis = 1)
#                 fyq4_closed_sales['Median of Q4 Closed Sales']= fyq4_closed_sales.median(axis = 1)
#                 fyq4_closed_sales['Std Dev of Q4 Closed Sales']= fyq4_closed_sales.std(axis = 1)
#                 fyq4_closed_sales['Min of Q4 Closed Sales']= fyq4_closed_sales.min(axis = 1)
#                 fyq4_closed_sales['Max of Q4 Closed Sales']= fyq4_closed_sales.max(axis = 1)
#                 fyq4_dom = df[[column for column in df.columns if 'Days on Market Until Sale' in column if k in column]]
#                 fyq4_dom['Mean of Q4 Days on the Market']= fyq4_dom.mean(axis = 1)
#                 fyq4_dom['Median of Q4 Days on the Market']= fyq4_dom.median(axis = 1)
#                 fyq4_dom['Std Dev of Q4 Days on the Market']= fyq4_dom.std(axis = 1)
#                 fyq4_dom['Min of Q4 Days on the Market']= fyq4_dom.min(axis = 1)
#                 fyq4_dom['Max of Q4 Days on the Market']= fyq4_dom.max(axis = 1)
#                 fyq4_median_sales = df[[column for column in df.columns if 'Median Sales Price' in column if k in column]]
#                 fyq4_median_sales['Mean of Q4 Median Sales'] = fyq4_median_sales.mean(axis = 1)
#                 fyq4_median_sales['Median of Q4 Median Sales'] = fyq4_median_sales.median(axis = 1)
#                 fyq4_median_sales['Std Dev of Q4 Median Sales'] = fyq4_median_sales.std(axis = 1)
#                 fyq4_median_sales['Min of Q4 Median Sales'] = fyq4_median_sales.min(axis = 1)
#                 fyq4_median_sales['Max of Q4 Median Sales'] = fyq4_median_sales.max(axis = 1)
#                 fyq4_polpr = df[[column for column in df.columns if 'Percent of List Price Received' in column if k in column]]
#                 fyq4_polpr['Mean of Q4 Percentage of Listing Price Received'] = fyq4_polpr.mean(axis = 1)
#                 fyq4_polpr['Median of Q4 Percentage of Listing Price Received'] = fyq4_polpr.median(axis = 1)
#                 fyq4_polpr['Std Dev of Q4 Percentage of Listing Price Received'] = fyq4_polpr.std(axis = 1)
#                 fyq4_polpr['Min of Q4 Percentage of Listing Price Received'] = fyq4_polpr.min(axis = 1)
#                 fyq4_polpr['Max of Q4 Percentage of Listing Price Received'] = fyq4_polpr.max(axis = 1)
#                 fyq4_inventory = df[[column for column in df.columns if 'Inventory of Homes for Sale' in column if k in column]]
#                 fyq4_inventory['Mean of Q4 Inventory of Homes'] = fyq4_inventory.mean(axis = 1)
#                 fyq4_inventory['Median of Q4 Inventory of Homes'] = fyq4_inventory.median(axis = 1)
#                 fyq4_inventory['Std Dev of Q4 Inventory of Homes'] = fyq4_inventory.std(axis = 1)
#                 fyq4_inventory['Min of Q4 Inventory of Homes'] = fyq4_inventory.min(axis = 1)
#                 fyq4_inventory['Max of Q4 Inventory of Homes'] = fyq4_inventory.max(axis = 1)
#                 fyq4_supply = df[[column for column in df.columns if 'Months Supply of Inventory' in column if k in column]]
#                 fyq4_supply['Mean of Q4 Monthly Supply'] = fyq4_supply.mean(axis = 1)
#                 fyq4_supply['Median of Q4 Monthly Supply'] = fyq4_supply.median(axis = 1)
#                 fyq4_supply['Std Dev of Q4 Monthly Supply'] = fyq4_supply.std(axis = 1)
#                 fyq4_supply['Min of Q4 Monthly Supply'] = fyq4_supply.min(axis = 1)
#                 fyq4_supply['Max of Q4 Monthly Supply'] = fyq4_supply.max(axis = 1)
#                 new_dict[k]['Q4'] = [fyq4_new_listings, fyq4_closed_sales, fyq4_dom, fyq4_median_sales, fyq4_polpr, fyq4_inventory, fyq4_supply]
#
#     return new_dict


results = ['Absecon City September 2019.pdf', 'Allamuchy Twp September 2019.pdf', 'Allendale Boro September 2019.pdf', 'Alloway Twp September 2019.pdf', 'Alpha Boro September 2019.pdf', 'Andover Twp September 2019.pdf', 'Audubon Park Boro September 2019.pdf', 'Avon-By-The-Sea Boro September 2019.pdf', 'Barnegat Twp September 2019.pdf', 'Bayonne City September 2019.pdf', 'Beach Haven Boro September 2019.pdf', 'Beachwood Boro September 2019.pdf', 'Bellmawr Boro September 2019.pdf', 'Belmar Boro September 2019.pdf', 'Bergenfield Boro September 2019.pdf', 'Berkeley Twp September 2019.pdf', 'Bernardsville Boro September 2019.pdf', 'Blairstown Twp September 2019.pdf', 'Bloomingdale Boro September 2019.pdf', 'Bogota Boro September 2019.pdf', 'Boonton Twp September 2019.pdf', 'Bordentown City September 2019.pdf', 'Branchville Boro September 2019.pdf', 'Bridgeton City September 2019.pdf', 'Brigantine City September 2019.pdf', 'Burlington City September 2019.pdf', 'Butler Boro September 2019.pdf', 'Carneys Point Twp September 2019.pdf', 'Chatham Twp September 2019.pdf', 'Chester Boro September 2019.pdf', 'Clinton Town September 2019.pdf', 'Closter Boro September 2019.pdf', 'Commercial Twp September 2019.pdf', 'Corbin City September 2019.pdf', 'Cresskill Boro September 2019.pdf', 'Deerfield Twp September 2019.pdf', 'Dennis Twp September 2019.pdf', 'Dover Town September 2019.pdf', 'Dunellen Boro September 2019.pdf', 'East Orange City September 2019.pdf', 'East Rutherford Boro September 2019.pdf', 'East Windsor Twp September 2019.pdf', 'Eastampton Twp September 2019.pdf', 'Edgewater Boro September 2019.pdf', 'Edgewater Park Twp September 2019.pdf', 'Edison Twp September 2019.pdf', 'Egg Harbor City September 2019.pdf', 'Elk Twp September 2019.pdf', 'Elsinboro Twp September 2019.pdf', 'Emerson Boro September 2019.pdf', 'Fair Haven Boro September 2019.pdf', 'Fair Lawn Boro September 2019.pdf', 'Fairfield Twp Cumberland County September 2019.pdf', 'Fairfield Twp Essex County September 2019.pdf', 'Fieldsboro Boro September 2019.pdf', 'Florence Twp September 2019.pdf', 'Frankford Twp September 2019.pdf', 'Franklin Lakes Boro September 2019.pdf', 'Freehold Boro September 2019.pdf', 'Frenchtown Boro September 2019.pdf', 'Galloway Twp September 2019.pdf', 'Garwood Boro September 2019.pdf', 'Glen Ridge Boro Twp September 2019.pdf', 'Glen Rock Boro September 2019.pdf', 'Gloucester City September 2019.pdf', 'Green Brook Twp September 2019.pdf', 'Green Twp September 2019.pdf', 'Greenwich Twp Gloucester County September 2019.pdf', 'Greenwich Twp Warren County September 2019.pdf', 'Hackensack City September 2019.pdf', 'Haddon Twp September 2019.pdf', 'Hamilton Twp Atlantic County September 2019.pdf', 'Hamilton Twp Mercer County September 2019.pdf', 'Hampton Boro September 2019.pdf', 'Harding Twp September 2019.pdf', 'Hardwick Twp September 2019.pdf', 'Hardyston Twp September 2019.pdf', 'Harrison Town September 2019.pdf', 'Harrison Twp September 2019.pdf', 'Hasbrouck Heights Boro September 2019.pdf', 'Haworth Boro September 2019.pdf', 'Hazlet Twp September 2019.pdf', 'Helmetta Boro September 2019.pdf', 'Highland Park Boro September 2019.pdf', 'Hightstown Boro September 2019.pdf', 'Hillside Twp September 2019.pdf', 'Hoboken City September 2019.pdf', 'Holland Twp September 2019.pdf', 'Holmdel Twp September 2019.pdf', 'Hopewell Boro September 2019.pdf', 'Hopewell Twp Cumberland County September 2019.pdf', 'Hopewell Twp Mercer County September 2019.pdf', 'Howell Twp September 2019.pdf', 'Irvington Twp September 2019.pdf', 'Jackson Twp September 2019.pdf', 'Jamesburg Boro September 2019.pdf', 'Jefferson Twp September 2019.pdf', 'Kenilworth Boro September 2019.pdf', 'Keyport Boro September 2019.pdf', 'Kinnelon Boro September 2019.pdf'...


29-Jul-23 20:39:54 - Extract_Data - INFO - The data for Aberdeen Twp April 2020.pdf is now being extracted
29-Jul-23 20:40:13 - Extract_Data - ERROR - A Regex Error Has Occurred
Traceback (most recent call last):
  File "F:/Python 2.0/Projects/Real Life Projects/NJRScrapper 7-24-23.py", line 1134, in extract_re_data
    main_dictionary[current_year]['City'].append(city)
UnboundLocalError: local variable 'city' referenced before assignment
29-Jul-23 20:40:13 - Extract_Data - INFO - The data for Aberdeen Twp April 2021.pdf is now being extracted
29-Jul-23 20:40:13 - Extract_Data - INFO - The data for Aberdeen Twp April 2021.pdf is now being extracted
29-Jul-23 20:40:20 - Extract_Data - ERROR - A Regex Error Has Occurred
Traceback (most recent call last):
  File "F:/Python 2.0/Projects/Real Life Projects/NJRScrapper 7-24-23.py", line 1134, in extract_re_data
    main_dictionary[current_year]['City'].append(city)
UnboundLocalError: local variable 'city' referenced before assignment
29-Jul-23 20:40:20 - Extract_Data - ERROR - A Regex Error Has Occurred
Traceback (most recent call last):
  File "F:/Python 2.0/Projects/Real Life Projects/NJRScrapper 7-24-23.py", line 1134, in extract_re_data
    main_dictionary[current_year]['City'].append(city)
UnboundLocalError: local variable 'city' referenced before assignment
29-Jul-23 20:40:20 - Extract_Data - INFO - The data for Aberdeen Twp April 2022.pdf is now being extracted
29-Jul-23 20:40:20 - Extract_Data - INFO - The data for Aberdeen Twp April 2022.pdf is now being extracted
29-Jul-23 20:40:20 - Extract_Data - INFO - The data for Aberdeen Twp April 2022.pdf is now being extracted
29-Jul-23 20:40:28 - Extract_Data - ERROR - A Regex Error Has Occurred
Traceback (most recent call last):
  File "F:/Python 2.0/Projects/Real Life Projects/NJRScrapper 7-24-23.py", line 1134, in extract_re_data
    main_dictionary[current_year]['City'].append(city)
UnboundLocalError: local variable 'city' referenced before assignment
29-Jul-23 20:40:28 - Extract_Data - ERROR - A Regex Error Has Occurred
Traceback (most recent call last):
  File "F:/Python 2.0/Projects/Real Life Projects/NJRScrapper 7-24-23.py", line 1134, in extract_re_data
    main_dictionary[current_year]['City'].append(city)
UnboundLocalError: local variable 'city' referenced before assignment
29-Jul-23 20:40:28 - Extract_Data - ERROR - A Regex Error Has Occurred
Traceback (most recent call last):
  File "F:/Python 2.0/Projects/Real Life Projects/NJRScrapper 7-24-23.py", line 1134, in extract_re_data
    main_dictionary[current_year]['City'].append(city)
UnboundLocalError: local variable 'city' referenced before assignment
29-Jul-23 20:40:28 - Extract_Data - INFO - The data for Aberdeen Twp April 2023.pdf is now being extracted
29-Jul-23 20:40:28 - Extract_Data - INFO - The data for Aberdeen Twp April 2023.pdf is now being extracted
29-Jul-23 20:40:28 - Extract_Data - INFO - The data for Aberdeen Twp April 2023.pdf is now being extracted
29-Jul-23 20:40:28 - Extract_Data - INFO - The data for Aberdeen Twp April 2023.pdf is now being extracted
29-Jul-23 20:40:36 - Extract_Data - ERROR - A Regex Error Has Occurred
Traceback (most recent call last):
  File "F:/Python 2.0/Projects/Real Life Projects/NJRScrapper 7-24-23.py", line 1134, in extract_re_data
    main_dictionary[current_year]['City'].append(city)
UnboundLocalError: local variable 'city' referenced before assignment
29-Jul-23 20:40:36 - Extract_Data - ERROR - A Regex Error Has Occurred
Traceback (most recent call last):
  File "F:/Python 2.0/Projects/Real Life Projects/NJRScrapper 7-24-23.py", line 1134, in extract_re_data
    main_dictionary[current_year]['City'].append(city)
UnboundLocalError: local variable 'city' referenced before assignment
29-Jul-23 20:40:36 - Extract_Data - ERROR - A Regex Error Has Occurred
Traceback (most recent call last):
  File "F:/Python 2.0/Projects/Real Life Projects/NJRScrapper 7-24-23.py", line 1134, in extract_re_data
    main_dictionary[current_year]['City'].append(city)
UnboundLocalError: local variable 'city' referenced before assignment
29-Jul-23 20:40:36 - Extract_Data - ERROR - A Regex Error Has Occurred
Traceback (most recent call last):
  File "F:/Python 2.0/Projects/Real Life Projects/NJRScrapper 7-24-23.py", line 1134, in extract_re_data
    main_dictionary[current_year]['City'].append(city)
UnboundLocalError: local variable 'city' referenced before assignment
29-Jul-23 20:40:36 - Extract_Data - INFO - The data for Aberdeen Twp August 2020.pdf is now being extracted
29-Jul-23 20:40:36 - Extract_Data - INFO - The data for Aberdeen Twp August 2020.pdf is now being extracted
29-Jul-23 20:40:36 - Extract_Data - INFO - The data for Aberdeen Twp August 2020.pdf is now being extracted
29-Jul-23 20:40:36 - Extract_Data - INFO - The data for Aberdeen Twp August 2020.pdf is now being extracted
29-Jul-23 20:40:36 - Extract_Data - INFO - The data for Aberdeen Twp August 2020.pdf is now being extracted
29-Jul-23 20:40:38 - Extract_Data - ERROR - A Regex Error Has Occurred
Traceback (most recent call last):
  File "F:/Python 2.0/Projects/Real Life Projects/NJRScrapper 7-24-23.py", line 980, in extract_re_data
    target = page.extract_text()
  File "F:\Python 2.0\lib\site-packages\PyPDF2\_page.py", line 1851, in extract_text
    return self._extract_text(
  File "F:\Python 2.0\lib\site-packages\PyPDF2\_page.py", line 1356, in _extract_text
    content = ContentStream(content, pdf, "bytes")
  File "F:\Python 2.0\lib\site-packages\PyPDF2\generic\_data_structures.py", line 877, in __init__
    self.__parse_content_stream(stream_bytes)
  File "F:\Python 2.0\lib\site-packages\PyPDF2\generic\_data_structures.py", line 943, in __parse_content_stream
    operands.append(read_object(stream, None, self.forced_encoding))
  File "F:\Python 2.0\lib\site-packages\PyPDF2\generic\_data_structures.py", line 1077, in read_object
    return NumberObject.read_from_stream(stream)
  File "F:\Python 2.0\lib\site-packages\PyPDF2\generic\_base.py", line 407, in read_from_stream
    return FloatObject(num)
  File "F:\Python 2.0\lib\site-packages\PyPDF2\generic\_base.py", line 407, in read_from_stream
    return FloatObject(num)
  File "_pydevd_bundle\pydevd_cython_win32_310_64.pyx", line 1179, in _pydevd_bundle.pydevd_cython_win32_310_64.SafeCallWrapper.__call__
  File "_pydevd_bundle\pydevd_cython_win32_310_64.pyx", line 620, in _pydevd_bundle.pydevd_cython_win32_310_64.PyDBFrame.trace_dispatch
  File "_pydevd_bundle\pydevd_cython_win32_310_64.pyx", line 1095, in _pydevd_bundle.pydevd_cython_win32_310_64.PyDBFrame.trace_dispatch
  File "_pydevd_bundle\pydevd_cython_win32_310_64.pyx", line 1001, in _pydevd_bundle.pydevd_cython_win32_310_64.PyDBFrame.trace_dispatch
  File "F:\Python 2.0\PyCharm Community Edition 2022.2.1\plugins\python-ce\helpers\pydev\pydevd.py", line 611, in in_project_scope
    def in_project_scope(self, filename):
KeyboardInterrupt
29-Jul-23 20:40:38 - Extract_Data - ERROR - A Regex Error Has Occurred
Traceback (most recent call last):
  File "F:/Python 2.0/Projects/Real Life Projects/NJRScrapper 7-24-23.py", line 980, in extract_re_data
    target = page.extract_text()
  File "F:\Python 2.0\lib\site-packages\PyPDF2\_page.py", line 1851, in extract_text
    return self._extract_text(
  File "F:\Python 2.0\lib\site-packages\PyPDF2\_page.py", line 1356, in _extract_text
    content = ContentStream(content, pdf, "bytes")
  File "F:\Python 2.0\lib\site-packages\PyPDF2\generic\_data_structures.py", line 877, in __init__
    self.__parse_content_stream(stream_bytes)

File "F:\Python 2.0\lib\site-packages\PyPDF2\_reader.py", line 317, in __init__
OSError: [Errno 24] Too many open files: 'Green Brook Twp September 2021.pdf'
04-Aug-23 02:38:28 - Extract_Data - ERROR - A Regex Error Has Occurred
Traceback (most recent call last):
  File "F:/Python 2.0/Projects/Real Life Projects/NJRScrapper 7-24-23.py", line 980, in extract_re_data
    pdfread = PyPDF2.PdfReader(pdfname)