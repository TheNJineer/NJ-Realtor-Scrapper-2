PRIORITY:
******I need to subscribe to CJMLS and Bright MLS for all municipal sales data
117) ******NJScrapper isn't currently getting data for Union Twp, NJ (Union County) or Union Twp, NJ (Hunterdon County)
    - Change the if '/' in town logic in extract_pdf. Thats why pdfs arent getting downloaded. Add 'elif town.split('/')[0] != check_city'
    - Remove the coding block from 801 - 811 from each if/elif block to make the code much cleaner
115) pandas2excel no longer uploads separate dbs by year, just an all months and all years db
71) Function that sends the data to an SQL Database
116) ***Learn to use Pandas to create Pivot tables. Only use Excel to store the Pivot Table, All Years and All Months
    - Store All Years and All Months in Excel until stored in PostgreSQL
118) Refactor njr10k, update_njr10k, good_data
112) Refactor matplot_lines(filename, **kwargs) to create a figure for each city and will house
 the axes for the 5 categories from 2019. Will no longer create separate charts for current year
    - Fix the dates format on the axis (DONE)
    - Change the colors of the plot lines for each year
    - Plot the average of each category on the same plot in a black line (DONE)
113) Create a matplotlib chart formatter function to make main function less cluttered (DONE)
114) Function that stores all created matplotlib PDFs to an No-SQL Database
106) Create an nj10k function which can take the city, county and **kwargs for args and download/extract pdfs
    - Create function which updates main_dictionary and full_year for missing data (DONE)
    - Needed for when I need to download pdfs for one city or cities in particular (DONE)
    - city arg can be a str or list object. Change code based on what the type is (DONE)
    *** Reload the dictionary using the shelve model (DONE)
    *** Refactor the pdf_generator code to find the files I want to download (DONE)
    *** Run thorugh pdf_extractor (DONE)
    *** Resave the dictionares in the shelve models
109) Add doc-strings to all the methods of the class
92) Create a method call quarterly_stats that runs the matplot_lines and njr10k_stats/njr10k_update_stats,
    cloropleth, histograms and Seaborn
86) Create a function to upload the GIS Data and create cloropleth maps and timeseries maps:
    - Current maps arent showing, I may need to reorder the target_df as the same index as the geopandas
105) Handle this warning:
F:/Python 2.0/Projects/Real Life Projects/OG NJRScrapper Non-Ascynio 10-4-23.py:1119: UserWarning: Boolean Series key will be reindexed to match DataFrame index.
  target1_df = temp1_df1[temp_df1['City'] == city]

_________________________________________________________________________________________________________________________________________


110) Clean all the strong and weak warning and format to PEP standards
107) Refactor the code so I'm not reloading the old db using the shelve module
    - Load the latest file from the Real Estate Data directory and turn the 'All Months ' and 'All Years' tabs into dictionaries
    - Load new data in to the main_dictionary and full_year dict then concatenate them to the 'All Months ' and 'All Years' tabs
    - Update the pandas2excel method to account for changes
72) ***Look into aiohttp for async http requesting
- asyncio is pretty difficult to use
- there's something about the async setup that mixing up the split function for the cities with duplicate names
- the download pdf function isnt downloading anything
73) asynio Exceptions to my try-except blocks which use the module
The current code causes errors because its walking through all files and folders and trying to extract whats not there
https://stackoverflow.com/questions/3207219/how-do-i-list-all-files-of-a-directory
79) Check back in a few days to determine campaign registration status on Twilio.com or email
80) Create decorator functions for these tasks:
    ***Use functool.wrapper to keep the metadata
 - Logger decorator function for:
    ***Change the logger level depending on the function running if possible
    ***May need to have "logger" as an arg to use in the function
    - CreateZip (properly place logger messages in function)
94) May need to alter the logic for the end_of_year variable with an if statement:
    if now = january, run zip
93) Create a decorator called quarterly_statistics
89) Make sure all the column datatypes are correct to calculate all stats
90) Make sure CreateZip runs as intended and the os.walk goes through all directories then set logger messages
91) Find a way to incorporate previous run date into run_main decorator
    Make sure the run_main function runs as intended
    It's not as intended right now, I need a way to check if the program has run already and if it has, check next month
99) Check all the try-except branches in the code to make sure they're being logged properly
    Use the help function on all of the Exception classes being used to make sure I'm capturing the most useful information
100) Should I be creating new Exception classes?
101) In case any errors are raised: I've changed the value calculation for percent_lpr_current
45) If the program is killed due to an exception, I want to be able to rerun the program X number of times
86) Create a function to upload the GIS Data and create cloropleth maps and timeseries maps:

    *** Create a time-series graph on the map of New Jersey for these categories as well
    - Download the CSV or GeoJSON (using Geopandas) from https://gisdata-njdep.opendata.arcgis.com/datasets/newjersey::municipal-boundaries-of-nj/explore?location=40.084926%2C-74.743150%2C8.00&showTable=true
    - Make sure the GeoJSON index matches the df index (rename the 'MUN' column to 'City') and join/merge the dfs

    def cloropleth_maps():
        import geopandas
        import plotly.express as px

        new_jersey = geopandas.read_file(filename, index = 'MUN')
        new_jersey.rename(columns = {'MUN': 'City'}, inplace = True)
        new_jersey[[column for column in new_jersey.columns]].sort_values(by=['City'])
        ***I have to sort the dfs by Qtr and year before plotting

        quarters = ['Q1', 'Q2', 'Q3', 'Q4']
        for sheet in list_of_excel_workbook_sheets:
            df = pd.read_excel('NJ 10k Real Estate', sheet)
            ***Create different dfs which are sorted dfs for Q1-Q4
            df_list = [df[[ for q in quarters
            fig = px.cloropleth()


    1) Create a function which creates line graphs and histograms for all categories for YTD for all cities of interest (sub x-axis will be by year)
        def target_areas_graphs(self):
            ***DF of Cites which have Top 10 Highest Median Closed Sales from all counties and filter for Median Sales Price < $750,000 (Decide on price later)

            by_qtr_stats = pd.read_excel('NJR Scrapper Data By Qtr Stats')
            years = temp_df['Year'].unique().to_list()
            temp_df = by_qtr_stats.copy()
            temp1_df = temp_df[['Year' == years[-1]]]
            counties  = temp_df['County'].unique().to_list()
            top10list = []

            for county in counties:
                temp2_df = temp1_df[['County' == county]]
                temp3_df = temp2_df.nlargest(10, 'Closed Sales(Median)')
                temp4_df = temp3_df[['Sales Price(Median)' < 750000]]
                top10list.append(temp4_df)

            target_cities_df = pd.concat(top10list)

    2) Create a function which creates histograms for all categories for YTD for all counties (sub x-axis will be by year)
        - Filter the new df by county
        def matplot_all_graphs(self):
    3) Use Seaborn to create pairplots on a state level then county level
        - Filter the new df by county and year
        import Seaborn




print(tabulate(main_dictionary['2022'], headers = 'keys', tablefmt = 'plain'))
print()
print(tabulate(main_dictionary['2023'], headers = 'keys', tablefmt = 'plain'))



